# obj: fitted model
# cluster: expression or vector for indicating which observations belong to which cluster
# type: string to change small-sample adjustment type
# target: variance/covariance model used to calculate CR2 and CR4 matrices
# boolean indicating whether or not model weights are inverse variance
function (obj, cluster, type, target = NULL, inverse_var = FALSE, form = "sandwich", ignore_FE = FALSE) {
    # TODO: write something better than "drops factor levels from cluster vector"
    cluster <- droplevels(as.factor(cluster))
    # creates boolean vector on if coefficient in coef vector from obj is null
    alias <- is.na(coef_CS(obj))
        # THIS IS COEF_CS, all it does is extract coefficient values from obj as a vector
        function (obj) {
            coef(obj)
        }
    X <- model_matrix(obj)
        # THIS IS MODEL_MATRIX
        function (obj) {
            # returns model matrix from obj if (no weights, or if they're all positive);
            # otherwise, returns model matrix with only positive weights (rows?), preserving structure of model_matrix
            model_matrix <- model.matrix(obj)
            w <- obj$weights
            if (is.null(w) || all(pos_wts <- w > 0)) {
                return(model_matrix)
            }
            else {
                return(model_matrix[pos_wts > 0, , drop = FALSE])
            }
        }
    if (any(alias)) {
        X <- X[, !alias, drop = FALSE]
    }

    p <- NCOL(X)
    N <- NROW(X)
    cluster_length <- length(cluster)

    # stop conditions
    if (cluster_length != N) {
        cluster <- droplevels(handle_vectors(cluster, obj))
        if (length(cluster) != N) {
            stop("Clustering variable must have length equal to the number of rows in the data used to fit obj.")
        }
    }

    if (any(is.na(cluster)))
        stop("Clustering variable cannot have missing values.")

    J <- nlevels(cluster)
    if (J < 2)
        stop("Cluster-robust variance estimation will not work when the data only includes a single cluster.")

    X_list <- matrix_list(X, cluster, "row")
        # THIS IS MATRIX_LIST
        function (x, fac, dim) {
            # if single, column, intercept only (?)
            if (is.vector(x)) {
                # stop condition
                if (dim != "both")
                    stop(paste0("Object must be a matrix in order to subset by ",
                        dim, "."))
                # splitting out clusters from entire design matrix
                # i.e. separating out the chunks of the design matrix that correspond to clusters
                x_list <- split(x, fac)
                lapply(x_list, function(x) diag(x, nrow = length(x)))
            }
            # if matrix, not just 1 column
            else {
                # TODO
                lapply(levels(fac), sub_f(x, fac, dim))
                    # THIS IS SUB_F
                    function (x, fac, dim) {
                        function(f) switch(dim, row = x[fac == f, , drop = FALSE],
                            col = x[, fac == f, drop = FALSE], both = x[fac == f,
                                fac == f, drop = FALSE])
                    }
            }
        }

    # hidden function
    W_list <- weightMatrix(obj, cluster)
        # THIS IS WEIGHTMATRIX.DEFAULT, ACCESS USING `getAnywhere(weightMatrix.default)` IN CONSOLE
        function (obj, cluster) {
            # extracts fitting weights from obj
            weights <- weights(obj)
            # sets weights
            if (is.null(weights)) {
                # assigns 1 to both weights and w_scale variables
                weights <- w_scale <- 1
            }
            else {
                # collects weights greater than 0; e.g. c(-1, 2, 3) changed to c(2, 3)
                weights <- weights[weights > 0]
                w_scale <- mean(weights)
                # new weights array divided by mean of new weights
                weights <- weights/w_scale
            }
            # generate vector of length num. clusters filled with weights
            W <- rep(weights, length.out = length(cluster))
            # previously annotated ("chunking it up")
            W_list <- matrix_list(W, cluster, "both")
            attr(W_list, "w_scale") <- w_scale
            W_list
        }

    # perform matrix multiplication on the chunks of the matrix as previously annotated
    XW_list <- Map(function(x, w) as.matrix(t(x) %*% w), x = X_list, w = W_list)

    # infers variance/covariance model
    if (is.null(target)) {
        # if model weights are inverse variance, compute cholesky decomposition on W
        # theta_list is calculated based on W in this case
        if (inverse_var) {
            Theta_list <- lapply(W_list, function(w) chol2inv(chol(w)))
        }
        # theta_list does not seem to be calculated based on the model object here as it's unused
        else {
            Theta_list <- targetVariance(obj, cluster)
                # THIS IS TARGETVARIANCE, ACCESS USING `getAnywhere(targetVariance.default)`
                function (obj, cluster) {
                    # splits list of 1s (length of list == num. clusters) by cluster?
                    matrix_list(rep(1, length(cluster)), cluster, "both")
                }
        }
    }
    else {

        if (!is.list(target)) {
            if (length(target) != N) {
                target <- handle_vectors(target, obj)
                    # THIS IS HANDLE_VECTORS, ACCESS USING `getAnywhere(handle_vectors)`
                    function (x, obj) {
                        # target is reset to indices excluding na.action of model object if
                        # the model object has it
                        if (inherits(na.action(obj), "omit")) {
                            x <- x[-na.action(obj)]
                        }
                        # target is set to indices corresponding to positive weights if not null
                        if (!is.null(wts <- weights(obj))) {
                            pos_wts <- wts > 0
                            if (!all(pos_wts))
                                x <- x[pos_wts]
                        }
                        # target returned without modifications otherwise
                        return(x)
                    }
            }
            Theta_list <- matrix_list(target, cluster, "both")
        }
        else {
            Theta_list <- target
        }
    }
    if (type %in% c("CR2", "CR4")) {
        S <- augmented_model_matrix(obj, cluster, inverse_var,
            ignore_FE)
        if (is.null(S)) {
            rm(S)
            U_list <- X_list
            UW_list <- XW_list
        }
        else {
            U <- cbind(X, S)
            rm(S)
            U_list <- matrix_list(U, cluster, "row")
            UW_list <- Map(function(u, w) as.matrix(t(u) %*%
                w), u = U_list, w = W_list)
        }
        UWU_list <- Map(function(uw, u) uw %*% u, uw = UW_list,
            u = U_list)
        M_U <- matrix_power(Reduce("+", UWU_list), p = -1)
    }
    adjustments <- do.call(type, args = mget(names(formals(type))))
    E_list <- adjust_est_mats(type = type, est_mats = XW_list,
        adjustments = adjustments)
    resid <- residuals_CS(obj)
    res_list <- split(resid, cluster)
    components <- do.call(cbind, Map(function(e, r) e %*% r,
        e = E_list, r = res_list))
    v_scale <- v_scale(obj)
    w_scale <- attr(W_list, "w_scale")
    if (is.null(w_scale))
        w_scale <- 1L
    if (form == "estfun") {
        bread <- sandwich::bread(obj)
        estfun <- bread %*% components
        return(estfun * (w_scale/v_scale))
    }
    meat <- tcrossprod(components) * w_scale^2/v_scale
    if (form == "sandwich") {
        bread <- sandwich::bread(obj)
    }
    else if (form == "meat") {
        bread <- NULL
    }
    else if (is.matrix(form)) {
        bread <- form
        form <- "sandwich"
    }
    vcov <- switch(form, sandwich = bread %*% meat %*% bread/v_scale,
        meat = meat)
    rownames(vcov) <- colnames(vcov) <- colnames(X)
    attr(vcov, "type") <- type
    attr(vcov, "cluster") <- cluster
    attr(vcov, "bread") <- bread
    attr(vcov, "v_scale") <- v_scale
    attr(vcov, "est_mats") <- XW_list
    attr(vcov, "adjustments") <- adjustments
    attr(vcov, "target") <- Theta_list
    attr(vcov, "inverse_var") <- inverse_var
    attr(vcov, "ignore_FE") <- ignore_FE
    class(vcov) <- c("vcovCR", "clubSandwich")
    return(vcov)
}











